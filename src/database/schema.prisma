generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model monsters {
  id               Int               @id
  name             String
  size_id          Int
  type_id          Int
  alignment        String
  armor_class      Int
  armor_desc       String
  challenge_rating Float
  hit_points       Int
  hit_dice         String
  monster_stats    monster_stats[]
  sizes            sizes             @relation(fields: [size_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  types            types             @relation(fields: [type_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  actions          actions[]
  monster_senses  monster_senses[]
  monster_languages monster_languages[]
  language_desc    String?
  monster_skills   monster_skills[]
  monster_speeds   monster_speeds[]
}

model sizes {
  id       Int        @id
  size     String
  monsters monsters[]
}

model types {
  id       Int        @id
  type     String
  monsters monsters[]
}

model actions {
  id           Int      @id @default(autoincrement())
  monster_id   Int
  name         String
  desc         String
  attack_bonus Int?
  damage_dice  String?
  damage_bonus Int?
  legendary    Boolean?
  monsters     monsters @relation(fields: [monster_id], references: [id], onUpdate: Restrict)
}

model monster_senses {
  sense_id   Int
  monster_id Int
  value      String
  monsters   monsters @relation(fields: [monster_id], references: [id], onUpdate: NoAction, map: "monster_id")
  senses     senses   @relation(fields: [sense_id], references: [id], onUpdate: NoAction, map: "sense_id")

  @@id([sense_id, monster_id], map: "monster_sense")
}

model senses {
  id              Int              @id
  sense           String
  monsters_senses monster_senses[]
}

model monster_stats {
  stat_id      Int
  monster_id   Int
  score        Int
  modifier     Int
  saving_throw Int?
  monsters     monsters @relation(fields: [monster_id], references: [id], onUpdate: Restrict)
  stats        stats    @relation(fields: [stat_id], references: [id], onUpdate: Restrict)

  @@id([stat_id, monster_id])
}

model stats {
  id            Int             @id @default(autoincrement())
  stat          String
  monster_stats monster_stats[]
}

model monster_languages {
  monster_id  Int
  language_id Int
  range       String?
  monsters    monsters @relation(fields: [monster_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  languages   languages @relation(fields: [language_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([monster_id, language_id])
}

model languages {
  id                Int                 @id @default(autoincrement())
  name              String
  monster_languages monster_languages[]
}

model monster_skills {
  monster_id Int
  skill_id   Int
  score      Int
  monsters   monsters @relation(fields: [monster_id], references: [id], onUpdate: Restrict)
  skills     skills   @relation(fields: [skill_id], references: [id], onUpdate: Restrict)

  @@id([monster_id, skill_id])
}

model skills {
  id             Int              @id @default(autoincrement())
  name           String
  monster_skills monster_skills[]
}

model monster_speeds {
  monster_id Int
  speed_id   Int
  range      Int
  monsters   monsters @relation(fields: [monster_id], references: [id], onUpdate: Restrict)
  speeds     speeds   @relation(fields: [speed_id], references: [id], onUpdate: Restrict)

  @@id([monster_id, speed_id])
}

model speeds {
  id             Int              @id @default(autoincrement())
  name           String
  monster_speeds monster_speeds[]
}